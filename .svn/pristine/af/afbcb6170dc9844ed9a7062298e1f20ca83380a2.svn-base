//
//  AppDelegate.m
//  TJYD
//
//  Created by 吴定如 on 17/3/29.
//  Copyright © 2017年 Dist. All rights reserved.
//

#import "AppDelegate.h"
#import "LoginViewController.h"
#import "SHNavigationController.h"
#import "DistGestureLock.h"
#import "AFNetworkActivityIndicatorManager.h"
#import "DistNetInterface.h"
#import "DistNetworkConfig.h"
#import "DistUrlArgumentsFilter.h"
#import "GDPerformanceMonitor.h"


@interface AppDelegate ()

@property (nonatomic,strong) DistGestureLock *gesture;
@property (nonatomic,strong) NSTimer *timer;

@end

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
    self.window.backgroundColor = [UIColor whiteColor];
    
    // 检测更新（定时）
    if (!_timer) {
        _timer = [NSTimer scheduledTimerWithTimeInterval:60 * 60 target:self selector:@selector(checkUpdated) userInfo:nil repeats:YES];
    }
    // 关闭用户手势反馈，默认为开启。
    [[PgyManager sharedPgyManager] setEnableFeedback:NO];
    // 启动SDK
    [[PgyUpdateManager sharedPgyManager] startManagerWithAppId:PGY_APP_ID];
    [[PgyManager sharedPgyManager] startManagerWithAppId:PGY_APP_ID];
    
    
    SHNavigationController *loginVC = [[SHNavigationController alloc] initWithRootViewController:[[LoginViewController alloc] init]];
    self.window.rootViewController = loginVC;
    
    // 网络状态
    [[AFNetworkActivityIndicatorManager sharedManager] setEnabled:YES];
    [[AFNetworkReachabilityManager sharedManager] startMonitoring];
    
    // 网络请求的配置
    DistNetworkConfig *config = [DistNetworkConfig sharedInstance];
    
    // 设置网络请求的域名
    config.baseUrl = NetEnvironment;
    
    // 在域名的后面可以添加一些公有的参数 例如 当前系统的版本信息等（以字典形式传入） 注：根据实际需求，若无，则可省略此步骤
    DistUrlArgumentsFilter *urlFilter = [DistUrlArgumentsFilter filterWithArguments:nil];
    [config addUrlFilter:urlFilter];
    
    
    // CPU,帧数
    #ifdef DEBUG
    [[GDPerformanceMonitor sharedInstance] startMonitoring];
    [[GDPerformanceMonitor sharedInstance] configureWithConfiguration:^(UILabel *textLabel) {
        [textLabel setBackgroundColor:[UIColor blackColor]];
        [textLabel setTextColor:[UIColor whiteColor]];
        [textLabel.layer setBorderColor:[[UIColor blackColor] CGColor]];
    }];
    #endif
//    [[GDPerformanceMonitor sharedInstance] setAppVersionHidden:YES];
//    [[GDPerformanceMonitor sharedInstance] setDeviceVersionHidden:YES];
    
    [self.window makeKeyWindow];
    
    return YES;
}

#pragma mark -- 允许旋转
- (BOOL)shouldAutorotate {
    return YES;
}

#pragma mark --设置设备返回横竖屏
- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
    // 手机
    if (SCREEN_WIDTH <= 414)
    {
        return UIInterfaceOrientationMaskPortrait;
//        return UIInterfaceOrientationMaskAll;
        
    }//ipad
    else
    {
//        return UIInterfaceOrientationMaskLandscape;
//        return UIInterfaceOrientationMaskPortrait;
        return UIInterfaceOrientationMaskAll;
    }
    
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
//    DamGestureLock *gestures = [[DamGestureLock alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
//    
//    self.gesture = gestures;
//    
//    gestures.lineColor = [UIColor whiteColor];
//    
//    //    gestures.bgImage = [UIImage imageNamed:@"bg"];
//    
//    gestures.lineTimer = 0.85;
//    
//    [self.window.rootViewController.view addSubview:gestures];
//    
//    [gestures dw_passwordSuccess:^(BOOL success, NSString *password, NSString *userPassword) {
//        
////        DLog(@"%d--%@--%@", success, password, userPassword);
////        
////        DLog(@"%ld", (unsigned long)password.length);
////        
////        DLog(@"连续输入%ld次密码", (long)gestures.inputCount);
//        if (success) {
//            
//            //                DLog(@"验证成功");
//            
//            [DamGestureLock dw_removePassword];
//            
//            [self.gesture removeFromSuperview];
//            
//             
//            
//        }else {
//            
//            //                DLog(@"验证失败");
//        }
//        
//    }];
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

#pragma mark -- 检测更新
- (void)checkUpdated {
//    [[PgyUpdateManager sharedPgyManager] checkUpdate];
    
    [[PgyUpdateManager sharedPgyManager] checkUpdateWithDelegete:self selector:@selector(updateMethod:)];
}

/**
 *  检查更新回调
 *
 *  @param response 检查更新的返回结果
 */
- (void)updateMethod:(NSDictionary *)response
{
    if (response[@"downloadURL"]) {
        
        NSString *message = response[@"releaseNote"];
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"发现新版本,请前往更新" message:message preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *updateAction = [UIAlertAction actionWithTitle:@"更新" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:response[@"downloadURL"]]];
            // 调用checkUpdateWithDelegete后可用此方法来更新本地的版本号，如果有更新的话，在调用了此方法后再次调用将不提示更新信息。
            [[PgyUpdateManager sharedPgyManager] updateLocalBuildNumber];
            
        }];
//        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
//        }];
        [alert addAction:updateAction];
        //[alert addAction:cancelAction];
        [[UIApplication sharedApplication].keyWindow.rootViewController presentViewController:alert animated:YES completion:nil];
    }
}

@end
